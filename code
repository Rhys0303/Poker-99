
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>
using namespace std;

struct Player {
    vector<int> hand;
    bool alive = true;
};

int main() {
    vector<int> deck;
    for (int i = 1; i <= 13; ++i)
        for (int j = 0; j < 4; ++j)
            deck.push_back(i);

    unsigned seed = chrono::system_clock::now().time_since_epoch().count();
    shuffle(deck.begin(), deck.end(), default_random_engine(seed));

    vector<Player> players(4);
    int total = 0, turn = 0, direction = 1;

    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 5; ++j)
            players[i].hand.push_back(deck.back()), deck.pop_back();

    while (true) {
        if (!players[turn].alive) {
            turn = (turn + direction + 4) % 4;
            continue;
        }

        int aliveCount = 0, winner = -1;
        for (int i = 0; i < 4; ++i)
            if (players[i].alive) aliveCount++, winner = i;
        if (aliveCount == 1) {
            cout << "玩家" << winner << "獲勝" << endl;
            break;
        }

        cout << "總分" << total << " 剩牌" << deck.size() << endl;
        for (int i = 0; i < players[turn].hand.size(); ++i)
            cout << "[" << i << "]" << players[turn].hand[i] << " ";
        cout << endl;

        int c;
        cin >> c;
        int card = players[turn].hand[c];

        if (card == 1) total = 0;
        else if (card == 4) direction *= -1;
        else if (card == 5) {
            for (int i = 0; i < 4; ++i)
                if (players[i].alive) cout << "[" << i << "]";
            int t;
            cin >> t;
            if (t == turn) {
                players[turn].hand.erase(players[turn].hand.begin() + c);
                if (!deck.empty()) players[turn].hand.push_back(deck.back()), deck.pop_back();
                for (int i = 0; i < players[turn].hand.size(); ++i)
                    cout << "[" << i << "]" << players[turn].hand[i] << " ";
                cout << endl;
                cin >> c;
                card = players[turn].hand[c];
            } else turn = t;
        }
        else if (card == 10 || card == 12) {
            int op;
            cin >> op;
            total += (op == 1 ? (card == 10 ? 10 : 20) : (card == 10 ? -10 : -20));
        }
        else if (card == 11) {
            turn = (turn + direction + 4) % 4;
        }
        else if (card == 13) total = 99;
        else total += card;

        players[turn].hand.erase(players[turn].hand.begin() + c);
        if (!deck.empty()) players[turn].hand.push_back(deck.back()), deck.pop_back();

        if (total > 99) {
            players[turn].alive = false;
            turn = (turn + direction + 4) % 4;
        } else {
            turn = (turn + direction + 4) % 4;
        }
    }
}
